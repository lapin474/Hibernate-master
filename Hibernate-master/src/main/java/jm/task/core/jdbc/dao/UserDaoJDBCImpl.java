package jm.task.core.jdbc.dao;import jm.task.core.UserDao;import jm.task.core.jdbc.model.JDCBUser;import jm.task.core.jdbc.util.JdbcUtil;import java.sql.*;import java.util.ArrayList;import java.util.List;public class UserDaoJDBCImpl implements UserDao {    private final Connection connection; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Connection    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å List –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ArrayList    private static final String CREATE_TABLE_SQL = "CREATE TABLE IF NOT EXISTS users (" +            "id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(20), lastName VARCHAR(20), age TINYINT)";    private static final String DROP_TABLE_SQL = "DROP TABLE IF EXISTS users";    private static final String INSERT_USER_SQL = "INSERT INTO users (name, lastName, age) VALUES (?, ?, ?)";    private static final String DELETE_USER_SQL = "DELETE FROM users WHERE id = ?";    private static final String GET_ALL_USERS_SQL = "SELECT * FROM users";    private static final String CLEAN_TABLE_SQL = "DELETE FROM users";    public UserDaoJDBCImpl() throws SQLException {        this.connection = JdbcUtil.getConnection();    }    @Override    public void createUsersTable() {        executeUpdate(CREATE_TABLE_SQL, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã");    }    @Override    public void dropUsersTable() {        executeUpdate(DROP_TABLE_SQL, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —É–¥–∞–ª–µ–Ω–∞!", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã");    }    @Override    public void saveUser(String name, String lastName, byte age) {        try (PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USER_SQL)) {            preparedStatement.setString(1, name);            preparedStatement.setString(2, lastName);            preparedStatement.setByte(3, age);            preparedStatement.executeUpdate();            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: " + name + " " + lastName);        } catch (SQLException e) {            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());        }    }    @Override    public void removeUserById(long id) {        try (PreparedStatement preparedStatement = connection.prepareStatement(DELETE_USER_SQL)) {            preparedStatement.setLong(1, id);            int rowsAffected = preparedStatement.executeUpdate();            if (rowsAffected > 0) {                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + id + " —É–¥–∞–ª–µ–Ω!");            } else {                System.out.println("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");            }        } catch (SQLException e) {            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());        }    }    @Override    public List<JDCBUser> getAllUsers() { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å List        List<JDCBUser> users = new ArrayList<>(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å        try (Statement statement = connection.createStatement();             ResultSet resultSet = statement.executeQuery(GET_ALL_USERS_SQL)) {            while (resultSet.next()) {                users.add(new JDCBUser(                        resultSet.getLong("id"),                        resultSet.getString("name"),                        resultSet.getString("lastName"),                        resultSet.getByte("age")                ));            }        } catch (SQLException e) {            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());        }        return users;    }    @Override    public void cleanUsersTable() {        executeUpdate(CLEAN_TABLE_SQL, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' –æ—á–∏—â–µ–Ω–∞!", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã");    }    // üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è SQL-–∫–æ–º–∞–Ω–¥ (DDL, DML)    private void executeUpdate(String sql, String successMessage, String errorMessage) {        try (Statement statement = connection.createStatement()) {            statement.executeUpdate(sql);            System.out.println(successMessage);        } catch (SQLException e) {            System.err.println(errorMessage + ": " + e.getMessage());        }    }}